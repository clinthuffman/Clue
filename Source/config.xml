<Configuration InstallationDirectory="%ProgramFiles%\Clue" OutputDirectory="C:\ClueOutput" UploadNetworkShare="" EmailReportTo="" WptFolderPath="" CollectionLevel="3" >
  <Rule Type="ScheduledTask" Enabled="True" Name="UserInitiated" Description="Monitors %public%\Documents\ClueUserInitiated.txt" Path="powershell" Arguments="-ExecutionPolicy ByPass -File Test-UserInitiated.ps1" Trigger="5" StartImmediately="true" Priority="high" OnStartActions="EtlHang-Start,Tasklist" OnEndActions="EtlHang-Stop,PalCollector,ToolConfig,ToolLog" MaxTraceTimeInSeconds="30" />
  <Rule Type="Counter" Enabled="True" Name="Counter-DiskLatencyGt25ms" Ran="0" RunLimit="10" CounterPath="\LogicalDisk(*)\Avg. Disk Sec/Transfer" Exclude="_Total,HarddiskVolume" SampleInterval="1" MaxSamples="1" Operator="gt" Threshold="0.025" OnStartActions="Tasklist,Storport-Start,EtlDisk-Start" OnEndActions="Storport-End,EtlDisk-End,PalCollector,PoolTags,ToolConfig,ToolLog" MaxTraceTimeInSeconds="30" StartImmediately="True" >
    <CODE><![CDATA[
      $WmiDisks = Get-WmiObject -Query 'SELECT * FROM Win32_LogicalDisk WHERE DriveType <> 3';
      foreach ($oDisk in $WmiDisks)
      {
          $Exclude = $Exclude + ',' + $oDisk.Name
      };
      ]]></CODE>
  </Rule>
  <Rule Type="Counter" Enabled="True" Name="Counter-MemoryFreeSystemPTEsLt50K" Ran="0" RunLimit="10" CounterPath="\Memory\Free System Page Table Entries" SampleInterval="1" MaxSamples="3" Operator="lt" Threshold="50000" OnStartActions="Tasklist,EtlMemory-Start" OnEndActions="PalCollector,EtlMemory-Stop,ToolConfig,ToolLog" MaxTraceTimeInSeconds="30" StartImmediately="True" />
  <Rule Type="Counter" Enabled="True" Name="Counter-CommittedMemoryInUseGt90Percent" Ran="0" RunLimit="10" CounterPath="\Memory\% Committed Bytes In Use" Exclude="" SampleInterval="1" MaxSamples="1" Operator="gt" Threshold="90" OnStartActions="Tasklist,EtlMemory-Start" OnEndActions="PalCollector,EtlMemory-Stop,ToolConfig,ToolLog" MaxTraceTimeInSeconds="30" StartImmediately="True" />
  <Rule Type="Counter" Enabled="True" Name="Counter-MemoryPoolPagedGt10Percent" Ran="0" RunLimit="10" CounterPath="\Memory\Pool Paged Bytes" Exclude="" SampleInterval="1" MaxSamples="1" Operator="gt" Threshold="1073741824" OnStartActions="Tasklist,EtlMemory-Start" OnEndActions="PalCollector,EtlMemory-Stop,ToolConfig,ToolLog" MaxTraceTimeInSeconds="30" StartImmediately="True">
    <CODE><![CDATA[
      [double] $number = 0;
      $Temp = ((Get-WmiObject -Query 'SELECT TotalVirtualMemorySize FROM Win32_OperatingSystem').TotalVirtualMemorySize * 1KB) * 0.10;
      [bool] $IsNumeric = [double]::TryParse($Temp, [REF] $number);
      if ($IsNumeric -eq $True)
      {
        $Threshold = $Temp
      };
      ]]></CODE>
  </Rule>
  <Rule Type="Counter" Enabled="True" Name="Counter-MemoryPoolNonPagedGt10Percent" Ran="0" RunLimit="10" CounterPath="\Memory\Pool NonPaged Bytes" Exclude="" SampleInterval="1" MaxSamples="1" Operator="gt" Threshold="1073741824" OnStartActions="Tasklist,EtlMemory-Start" OnEndActions="PalCollector,EtlMemory-Stop,ToolConfig,ToolLog" MaxTraceTimeInSeconds="30" StartImmediately="True">
    <CODE><![CDATA[
      [double] $number = 0;
      $Temp = (Get-WmiObject -Query 'SELECT TotalPhysicalMemory FROM Win32_ComputerSystem').TotalPhysicalMemory * 0.10;
      [bool] $IsNumeric = [double]::TryParse($Temp, [REF] $number);
      if ($IsNumeric -eq $True)
      {
        $Threshold = $Temp
      };
      ]]></CODE>
  </Rule>
  <Rule Type="Counter" Enabled="True" Name="Counter-ProcessorTimeGt90" Ran="0" RunLimit="10" CounterPath="\Processor Information(*)\% Processor Time" Exclude="_Total" SampleInterval="1" MaxSamples="3" Operator="gt" Threshold="90" OnStartActions="Tasklist,EtlCpu-Start" OnEndActions="EtlCpu-End,PalCollector,ToolConfig,ToolLog" MaxTraceTimeInSeconds="30" StartImmediately="True" />
  <Rule Type="Counter" Enabled="True" Name="Counter-ThermalZoneTemperature" Ran="0" RunLimit="10" CounterPath="\Thermal Zone Information(*)\Temperature" Exclude="_Total" SampleInterval="1" MaxSamples="3" Operator="gt" Threshold="354" OnStartActions="Tasklist,EtlPowerThermal-Start" OnEndActions="EtlPowerThermal-End,PalCollector,ToolConfig,ToolLog" MaxTraceTimeInSeconds="30" StartImmediately="True" />
  <Rule Type="Counter" Enabled="True" Name="Counter-PowerMeterPower" Ran="0" RunLimit="10" CounterPath="\Power Meter(*)\Power" Exclude="_Total" SampleInterval="1" MaxSamples="3" Operator="gt" Threshold="8000" OnStartActions="Tasklist,EtlPowerThermal-Start" OnEndActions="EtlPowerThermal-End,PalCollector,ToolConfig,ToolLog" MaxTraceTimeInSeconds="120" StartImmediately="True" >
    <CODE><![CDATA[
      $iCapacity = (Get-WmiObject -Namespace root/wmi -Class BatteryStaticData).DesignedCapacity;
      if ($iCapacity -is [System.UInt32])
      {
        $Threshold = ($iCapacity / 8);
      };
      ]]></CODE>
  </Rule>
  <Rule Type="Counter" Enabled="True" Name="Counter-HighCpuWmi" Ran="0" RunLimit="10" CounterPath="\Process(WmiPrvSE*)\% Processor Time" Exclude="_Total" SampleInterval="1" MaxSamples="3" Operator="gt" Threshold="80" OnStartActions="Tasklist,EtlCpu-Start" OnEndActions="EtlCpu-End,PalCollector,EventLogs,GetWmiProviders,ToolConfig,ToolLog" MaxTraceTimeInSeconds="30" StartImmediately="True" >
    <CODE><![CDATA[
      $LogicalProcessorCount = (Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem).NumberOfLogicalProcessors;
      $Threshold = ($LogicalProcessorCount * 80);
      ]]></CODE>  
  </Rule>
  <Rule Type="ScheduledTask" Enabled="True" Name="IncidentFolderManagement" Description="Manages and uploads incident folders." Path="powershell" Arguments="-ExecutionPolicy ByPass -File IncidentFolderManagement.ps1" Trigger="30" StartImmediately="false" Priority="low" />
  <Action Name="PalCollector" CollectionLevel="1"><![CDATA[
    [int] $DelayInSeconds = 3;
    Write-Log ('Post incident delay of ' + $DelayInSeconds + ' seconds, then collect counter log...') -Log $Log;
    Start-Sleep -Seconds $DelayInSeconds;
    Write-Log ('Post incident delay of ' + $DelayInSeconds + ' seconds, then collect counter log...Done!') -Log $Log;
    [string] $sCmd = 'logman stop PalCollector';
    Write-Log ($sCmd) -Log $Log;
    $oOutput = Invoke-Expression -Command $sCmd;
    Write-Log ($oOutput) -Log $Log;
    [string] $sSource = $OutputDirectory + '\PalCollector.blg';
    Write-Log ('Source: ' + $sSource) -Log $Log;
    Move-Item -Path $sSource -Destination $IncidentOutputFolder;
    Start-Sleep -Seconds 5;
    [string] $sCmd = 'logman start PalCollector';
    Write-Log ($sCmd) -Log $Log;
    Invoke-Expression -Command $sCmd;
	  ]]></Action>
  <Action Name="Tasklist" CollectionLevel="1"><![CDATA[
    [string] $sCmd = 'Tasklist /svc /FO CSV > "' + $IncidentOutputFolder + '\Tasklist.csv"';
    Write-Log ($sCmd) -Log $Log;
    $oOutput = Invoke-Expression -Command $sCmd;
    Write-Log ($oOutput) -Log $Log;
	  ]]></Action>
  <Action Name="EtlCpu-Start" CollectionLevel="2"><![CDATA[
    #// Start-WPR
    Write-Log ('EtlCpu-Start...') -Log $Log;
    $OsVersion = (gwmi Win32_OperatingSystem).Version
    Write-Log ('OsVersion: ' + $OsVersion)
    [System.Version] $RS5 = '10.0.17763';
    if ($OsVersion -ge $RS5)
    {
        [string] $sWprArguments = '-start "' + $WorkingDirectory + '\ClueCpu.wprp" -instancename ' + $RuleName;
    }
    else
    {
        [string] $sWprArguments = '-start DesktopComposition -start CPU -start GPU -start Power -instancename ' + $RuleName;
    };    
    Write-Log ('WptFolderPath: ' + $WptFolderPath) -Log $Log;
    Write-Log ('sWprArguments: ' + $sWprArguments) -Log $Log;    
    Start-Wpr -WptFolderPath $WptFolderPath -Arguments $sWprArguments -Log $Log;
    Write-Log ('EtlCpu-Start...Done!') -Log $Log;
	  ]]></Action>
  <Action Name="EtlCpu-End" CollectionLevel="2"><![CDATA[
    #// Stop-Wpr
    Write-Log ('EtlCpu-End...') -Log $Log;
    $EtlFilePath = '"' + $IncidentOutputFolder + '\' + $TimeStamp + '-ClueCpu.etl"';
    Write-Log ('EtlFilePath: ' + $EtlFilePath) -Log $Log;
    [string] $sWprArguments = '-stop "' + $EtlFilePath + '" -instancename ' + $RuleName;
    Write-Log ('WptFolderPath: ' + $WptFolderPath) -Log $Log;
    Write-Log ('sWprArguments: ' + $sWprArguments) -Log $Log;
    Start-Wpr -WptFolderPath $WptFolderPath -Arguments $sWprArguments -Log $Log;
    Write-Log ('EtlCpu-End...Done!') -Log $Log;        
	  ]]></Action>
  <Action Name="EtlDisk-Start" CollectionLevel="2"><![CDATA[
    Write-Log ('EtlDisk-Start...') -Log $Log;
    $OsVersion = (gwmi Win32_OperatingSystem).Version
    Write-Log ('OsVersion: ' + $OsVersion)
    [System.Version] $RS5 = '10.0.17763';
    if ($OsVersion -ge $RS5)
    {
        [string] $sWprArguments = '-start "' + $WorkingDirectory + '\ClueDisk.wprp.verbose" -instancename ' + $RuleName;
    }
    else
    {
        [string] $sWprArguments = '-start GeneralProfile -start DiskIO -start FileIO -start Minifilter -instancename ' + $RuleName;
    }    
    Write-Log ('WptFolderPath: ' + $WptFolderPath) -Log $Log;
    Write-Log ('sWprArguments: ' + $sWprArguments) -Log $Log;    
    Start-Wpr -WptFolderPath $WptFolderPath -Arguments $sWprArguments -Log $Log;
    Write-Log ('EtlDisk-Start...Done!') -Log $Log;
	  ]]></Action>
  <Action Name="EtlDisk-End" CollectionLevel="2"><![CDATA[
    #// Stop-Wpr
    Write-Log ('EtlDisk-End...') -Log $Log;
    $EtlFilePath = '"' + $IncidentOutputFolder + '\' + $TimeStamp + '-ClueDisk.etl"';
    Write-Log ('EtlFilePath: ' + $EtlFilePath) -Log $Log;
    [string] $sWprArguments = '-stop "' + $EtlFilePath + '" -instancename ' + $RuleName;
    Write-Log ('WptFolderPath: ' + $WptFolderPath) -Log $Log;
    Write-Log ('sWprArguments: ' + $sWprArguments) -Log $Log;
    Start-Wpr -WptFolderPath $WptFolderPath -Arguments $sWprArguments -Log $Log;
    Write-Log ('EtlDisk-End...Done!') -Log $Log;
	  ]]></Action>
  <Action Name="EtlPowerThermal-Start" CollectionLevel="2"><![CDATA[
    #// Start-WPR
    Write-Log ('EtlPowerThermal-Start...') -Log $Log;
    $OsVersion = (gwmi Win32_OperatingSystem).Version
    Write-Log ('OsVersion: ' + $OsVersion)
    [System.Version] $RS5 = '10.0.17763';
    if ($OsVersion -ge $RS5)
    {
        [string] $sWprArguments = '-start "' + $WorkingDirectory + '\CluePowerThermal.wprp.verbose" -instancename ' + $RuleName;
    }
    else
    {
        [string] $sWprArguments = '-start DesktopComposition -start CPU -start GPU -start Power -instancename ' + $RuleName;
    };    
    Write-Log ('WptFolderPath: ' + $WptFolderPath) -Log $Log;
    Write-Log ('sWprArguments: ' + $sWprArguments) -Log $Log;    
    Start-Wpr -WptFolderPath $WptFolderPath -Arguments $sWprArguments -Log $Log;
    Write-Log ('EtlPowerThermal-Start...Done!') -Log $Log;
	  ]]></Action>
  <Action Name="EtlPowerThermal-End" CollectionLevel="2"><![CDATA[
    #// Stop-Wpr
    Write-Log ('EtlPowerThermal-End...') -Log $Log;
    $EtlFilePath = '"' + $IncidentOutputFolder + '\' + $TimeStamp + '-CluePowerThermal.etl"';
    Write-Log ('EtlFilePath: ' + $EtlFilePath) -Log $Log;
    [string] $sWprArguments = '-stop "' + $EtlFilePath + '" -instancename ' + $RuleName;
    Write-Log ('WptFolderPath: ' + $WptFolderPath) -Log $Log;
    Write-Log ('sWprArguments: ' + $sWprArguments) -Log $Log;
    Start-Wpr -WptFolderPath $WptFolderPath -Arguments $sWprArguments -Log $Log;
    Write-Log ('EtlPowerThermal-End...Done!') -Log $Log;        
	  ]]></Action>
  <Action Name="EventLogs" CollectionLevel="1"><![CDATA[
    [string] $sEventLogOutputFolderPath = $IncidentOutputFolder + '\EventLogs';
    New-Item -Path $sEventLogOutputFolderPath -type directory;
    [string] $sSource = $env:Windir + '\System32\winevt\Logs\Application.evtx';
    Copy-Item -Path $sSource -Destination $sEventLogOutputFolderPath -ErrorAction SilentlyContinue;
    [string] $sSource = $env:Windir + '\System32\winevt\Logs\System.evtx';
    Copy-Item -Path $sSource -Destination $sEventLogOutputFolderPath -ErrorAction SilentlyContinue;
    [string] $sSource = $env:Windir + '\System32\winevt\Logs\Microsoft-Windows-WMI-Activity*.*';
    Copy-Item -Path $sSource -Destination $sEventLogOutputFolderPath -ErrorAction SilentlyContinue;
    [string] $sSource = $env:Windir + '\System32\winevt\Logs\Microsoft-Windows-Sysmon*.evtx';
    Copy-Item -Path $sSource -Destination $sEventLogOutputFolderPath -ErrorAction SilentlyContinue;
    [string] $sSource = $env:Windir + '\System32\winevt\Logs\HardwareEvents.evtx';
    Copy-Item -Path $sSource -Destination $sEventLogOutputFolderPath -ErrorAction SilentlyContinue;
	  ]]></Action>
  <Action Name="ToolLog" CollectionLevel="1"><![CDATA[
    Copy-Item -Path 'C:\Program Files\Clue\*.log' -Destination $IncidentOutputFolder -ErrorAction SilentlyContinue;
    ]]></Action>
  <Action Name="Sleep" CollectionLevel="1"><![CDATA[
    [int] $iSleepInSeconds = 600;
    Write-Log ('Sleeping for: ' + $iSleepInSeconds) -Log $Log;
    Start-Sleep -Seconds $iSleepInSeconds;
    Write-Log ('Done sleeping.') -Log $Log;
    ]]></Action>
  <Action Name="ToolConfig" CollectionLevel="1"><![CDATA[
    Copy-Item -Path '.\config.xml' -Destination $IncidentOutputFolder -ErrorAction SilentlyContinue;
    ]]></Action>
  <Action Name="PoolTags" CollectionLevel="2"><![CDATA[
    [string] $sFilePathToPoolSnapLog = New-PoolmonLog -OutputDirectory $IncidentOutputFolder -Log $Log;
    [string] $sTopPoolTags = Get-TopPoolTags -OutputDirectory $IncidentOutputFolder -Log $Log;
    [string] $sCsvTagsToDriverFilesFilePath = $IncidentOutputFolder + '\TagsToDriverFiles.csv';
    Get-TagsToDrivers -Tags $sTopPoolTags -Log $Log | Export-Csv -Path $sCsvTagsToDriverFilesFilePath -NoTypeInformation;
    ]]></Action>
  <Action Name="EtlMemory-Start" CollectionLevel="2"><![CDATA[
    #// Pool tags;
    [string] $sFilePathToPoolSnapLog = New-PoolmonLog -OutputDirectory $OutputDirectory -Log $Log;
    Copy-Item -Path $sFilePathToPoolSnapLog -Destination $IncidentOutputFolder;
    [string] $sTopPoolTags = Get-TopPoolTags -OutputDirectory $OutputDirectory -Log $Log;
    Write-Log ('sTopPoolTags: ' + $sTopPoolTags) -Log $Log;
    [string] $sCsvTagsToDriverFilesFilePath = $IncidentOutputFolder + '\TagsToDriverFiles.csv';
    Get-TagsToDrivers -Tags $sTopPoolTags -Log $Log | Export-Csv -Path $sCsvTagsToDriverFilesFilePath -NoTypeInformation;
 
    #// Start xperf trace;
    If ($sTopPoolTags -ne '')
    {
      [string] $sXperfArguments = '-on LOADER+VIRT_ALLOC+POOL+PROC_THREAD -stackwalk PoolAlloc+PoolAllocSession+VirtualAlloc -pooltag ' + $sTopPoolTags + ' -minbuffers 256 -maxbuffers 256 -maxfile 256 -f ' + $OutputDirectory + '\pre-merged-kernel.etl'
    }
    Else
    {
      [string] $sXperfArguments = '-on LOADER+VIRT_ALLOC+POOL+PROC_THREAD -stackwalk PoolAlloc+PoolAllocSession+VirtualAlloc -minbuffers 256 -maxbuffers 256 -maxfile 256 -f ' + $OutputDirectory + '\pre-merged-kernel.etl'
    }
    Start-Xperf -WptFolderPath $WptFolderPath -Arguments $sXperfArguments -Log $Log;
	  ]]></Action>
  <Action Name="EtlMemory-End" CollectionLevel="2"><![CDATA[
    #// Stop xperf;
    $EtlFilePath = '"' + $IncidentOutputFolder + '\' + $TimeStamp + '.etl"';
    Stop-Xperf -WptFolderPath $WptFolderPath -EtlFilePath $EtlFilePath -Log $Log;
	  ]]></Action>
  <Action Name="EtlHang-Start" CollectionLevel="2"><![CDATA[
    #// Run EtlHang
    Write-Log ('EtlHang...') -Log $Log;
    #// Start xperf trace;
    [string] $sXperfArguments = '-on PROC_THREAD+LOADER+PROFILE+DPC+INTERRUPT+DRIVERS+DISPATCHER+CSWITCH+DISK_IO_INIT+FileIO -stackWalk Profile+ReadyThread+CSWITCH+DiskReadInit+DiskWriteInit+DiskFlushInit -BufferSize 256 -MinBuffers 256 -MaxBuffers 256 -f ' + $OutputDirectory + '\pre-merged-kernel.etl'
    Start-Xperf -WptFolderPath $WptFolderPath -Arguments $sXperfArguments -Log $Log;
	  ]]></Action>
  <Action Name="EtlHang-Stop" CollectionLevel="2"><![CDATA[
    #// Stop xperf;
    $EtlFilePath = '"' + $IncidentOutputFolder + '\UserInitiated-' + $TimeStamp + '.etl"';
    Stop-Xperf -WptFolderPath $WptFolderPath -EtlFilePath $EtlFilePath -Log $Log;
	  ]]></Action>
  <Action Name="GetWmiProviders" CollectionLevel="2"><![CDATA[
	& .\Get-WmiProviders.ps1 -IncidentOutputFolder $IncidentOutputFolder
	  ]]></Action>
  <Action Name="Storport-Start" CollectionLevel="3"><![CDATA[
	& logman create trace "storport" -ow -o C:\ClueOutput\storport.etl -p "Microsoft-Windows-StorPort" 0xffffffffffffffff 0xff -nb 16 16 -bs 1024 -mode Circular -f bincirc -max 4096 -ets
	  ]]></Action>
  <Action Name="Storport-End" CollectionLevel="3"><![CDATA[
	& logman stop storport -ets
	  ]]></Action>
</Configuration>